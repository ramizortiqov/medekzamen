import os
import json
import asyncio
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è FSM
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import WebAppInfo, ContentType, CallbackQuery


# -------------------- 1. –ù–ê–°–¢–†–û–ô–ö–ê –ò –ö–û–ù–°–¢–ê–ù–¢–´ --------------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –í–ê–®–ò –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–´ (–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)
ADMIN_IDS = [6720999592, 6520890849] 

# üö® –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ü–û–î–ü–ò–°–ö–ò
CHANNEL_ID = -1002034189536 
CHANNEL_URL = "https://t.me/fr_ray7"
FEEDBACK_USERNAME_URL = "https://t.me/parviz_medik" # ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® @–õ–û–ì–ò–ù

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

CONTENT_FILE = "content.json"


# --- 2. FSM –°–û–°–¢–û–Ø–ù–ò–Ø ---
class AdminStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    waiting_for_content = State()
    waiting_for_index_to_delete = State()


# --- 3. –ó–ê–ì–†–£–ó–ö–ê / –°–û–•–†–ê–ù–ï–ù–ò–ï –ö–û–ù–¢–ï–ù–¢–ê ---
def load_content():
    if not os.path.exists(CONTENT_FILE):
        return {}
    with open(CONTENT_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_content(data):
    with open(CONTENT_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

content_data = load_content()


# --- 4. –°–ï–†–í–ò–°–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def get_admin_menu(tag: str) -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–ó–∞–≥—Ä—É–∑–∏—Ç—å' –∏ '–£–¥–∞–ª–∏—Ç—å' –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(text=f"‚ûï –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ #{tag}", callback_data=f"upload__{tag}") 
    builder.button(text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ –∏–Ω–¥–µ–∫—Å—É –∏–∑ #{tag}", callback_data=f"delete_indexed__{tag}") 
    builder.adjust(1)
    return builder.as_markup()

def get_subscription_keyboard() -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üîî –ü–æ–¥–ø–∏—Å–∫–∞", url=CHANNEL_URL)
    builder.button(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check_subscription")
    builder.adjust(2)
    return builder.as_markup()

def get_no_access_message() -> str:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    return f"üö´ **–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.** –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, **–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å** –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª."

async def check_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª."""
    if user_id in ADMIN_IDS:
        return True
        
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

def clean_tags(text: str, tag: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–≥ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    cleaned_text = text.replace(f"#{tag}", "").replace(f"#{tag.upper()}", "")
    cleaned_text = ' '.join(cleaned_text.split())
    return cleaned_text


# -------------------- 5. –§–£–ù–ö–¶–ò–ò –ö–õ–ê–í–ò–ê–¢–£–† (Reply) --------------------
def get_reply_main_menu_keyboard():
    """–û–ë–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω —Ä–∞–∑–¥–µ–ª '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'."""
    builder = ReplyKeyboardBuilder()
    builder.button(text="üìö –≠–∫–∑–∞–º–µ–Ω")
    builder.button(text="üìã –ò—Ç–æ–≥")
    builder.button(text="üìÇ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
    builder.button(text="üö™ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
    builder.button(text="‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å") # –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê
    builder.adjust(2, 2, 1) # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: 2 –≤ –ø–µ—Ä–≤–æ–º, 2 –≤–æ –≤—Ç–æ—Ä–æ–º, 1 –≤ —Ç—Ä–µ—Ç—å–µ–º
    return builder.as_markup(resize_keyboard=True)

def get_reply_exam_menu_keyboard():
    builder = ReplyKeyboardBuilder()
    for i in range(1, 7):
        builder.button(text=f"{i}-–∫—É—Ä—Å")
    builder.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    builder.adjust(3, 3, 1)
    return builder.as_markup(resize_keyboard=True)

def get_reply_materials_menu_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üìñ –õ–µ–∫—Ü–∏–∏")
    builder.button(text="üî¨ –ü—Ä–∞–∫—Ç–∏–∫–∞")
    builder.button(text="üé• –í–∏–¥–µ–æ")
    builder.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    builder.adjust(3, 1)
    return builder.as_markup(resize_keyboard=True)

def get_reply_summary_course_keyboard():
    builder = ReplyKeyboardBuilder()
    for i in range(1, 4): 
        builder.button(text=f"–ò—Ç–æ–≥ - {i} –∫—É—Ä—Å") 
    builder.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é") 
    builder.adjust(3, 1) 
    return builder.as_markup(resize_keyboard=True)

def get_reply_final_summary_keyboard(course_num: int):
    builder = ReplyKeyboardBuilder()
    for i in range(1, 5):
        builder.button(text=f"–ò—Ç–æ–≥ {course_num}.{i}")
    builder.button(text="üîô –ö –∫—É—Ä—Å–∞–º –ò—Ç–æ–≥–∞")
    builder.adjust(4, 1)
    return builder.as_markup(resize_keyboard=True)


# -------------------- 6. –û–¢–ü–†–ê–í–ö–ê –ö–û–ù–¢–ï–ù–¢–ê --------------------

async def send_content_by_tag(chat_id: int, tag: str):
    """–ù–∞—Ö–æ–¥–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –≤ JSON-—Å–ª–æ–≤–∞—Ä–µ –ø–æ —Ç–µ–≥—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ."""
    tag = tag.lower()
    materials = content_data.get(tag, [])
    
    if not materials:
        await bot.send_message(chat_id, f"‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ç–µ–≥—É **#{tag}** –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", parse_mode="Markdown")
        return

    await bot.send_message(chat_id, f"üì¶ **–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É:**", parse_mode="Markdown")

    for item in materials:
        caption = item.get("caption", None)
        file_id = item.get("file_id", None)
        item_type = item.get("type")
        file_name = item.get("file_name", None) 
        
        if caption:
            caption = clean_tags(caption, tag)
            
        final_caption = ""
        if file_name and item_type != "text":
             final_caption += f"üìÑ **{file_name}**\n\n" 
             
        if caption:
            final_caption += caption
            
        if not final_caption and item_type != "text":
             final_caption = f"*{item_type.capitalize()} –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è*"
            
        try:
            if item_type == "text":
                await bot.send_message(chat_id, final_caption)
            elif item_type == "photo" and file_id:
                await bot.send_photo(chat_id, file_id, caption=final_caption, parse_mode="Markdown")
            elif item_type == "video" and file_id:
                await bot.send_video(chat_id, file_id, caption=final_caption, parse_mode="Markdown")
            elif item_type == "document" and file_id:
                await bot.send_document(chat_id, file_id, caption=final_caption, parse_mode="Markdown")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ {item_type} –¥–ª—è —Ç–µ–≥–∞ #{tag}: {e}")
            await bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.")

    await bot.send_message(chat_id, "‚úÖ –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")


# -------------------- 7. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò FSM (–ó–ê–ì–†–£–ó–ö–ê –ò –£–î–ê–õ–ï–ù–ò–ï) --------------------

@dp.callback_query(lambda c: c.data.startswith('upload__'), lambda m: m.from_user.id in ADMIN_IDS)
async def start_upload_fsm(callback: types.CallbackQuery, state: FSMContext):
    target_tag = callback.data.split('__')[1]
    
    await state.update_data(target_tag=target_tag)
    await state.set_state(AdminStates.waiting_for_content)
    
    await callback.message.answer(
        f"‚úÖ –†–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ **#{target_tag}**.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /start.", 
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.message(AdminStates.waiting_for_content)
async def process_content_upload(message: types.Message, state: FSMContext):
    
    if message.text and message.text.lower() == '/start':
        await state.clear()
        return await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_reply_main_menu_keyboard())

    data = await state.get_data()
    target_tag = data.get('target_tag')
    
    if not target_tag:
        await state.clear()
        return await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π —Ä–∞–∑–¥–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        
    entry = {"type": "text", "file_id": None, "caption": message.caption or message.text, "file_name": None}
    
    if message.document:
        entry["type"] = "document"
        entry["file_id"] = message.document.file_id
        entry["file_name"] = message.document.file_name
    elif message.photo:
        entry["type"] = "photo"
        entry["file_id"] = message.photo[-1].file_id
        entry["file_name"] = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    elif message.video:
        entry["type"] = "video"
        entry["file_id"] = message.video.file_id
        entry["file_name"] = message.video.file_name or "–í–∏–¥–µ–æ–∑–∞–ø–∏—Å—å"
    elif not message.text:
        await message.answer("‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–Ω—É–∂–µ–Ω —Ñ–∞–π–ª, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç).")
        return

    if target_tag not in content_data:
        content_data[target_tag] = []
    
    entry['caption'] = entry['caption'].strip() if entry['caption'] else ""
    content_data[target_tag].append(entry)
    save_content(content_data)

    await message.answer(f"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ä–∞–∑–¥–µ–ª **#{target_tag}**!\n–ò–º—è —Ñ–∞–π–ª–∞: **{entry.get('file_name', '–ù–µ—Ç –∏–º–µ–Ω–∏')}**", parse_mode="Markdown")
    
    await state.clear()
    await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_reply_main_menu_keyboard())


# --- FSM: –ó–∞–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –∏–Ω–¥–µ–∫—Å—É ---

@dp.callback_query(lambda c: c.data.startswith('delete_indexed__'), lambda m: m.from_user.id in ADMIN_IDS)
async def start_indexed_delete(callback: types.CallbackQuery, state: FSMContext):
    """Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –ó–∞–ø—É—Å–∫–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫."""
    tag = callback.data.split('__')[1]
    
    materials = content_data.get(tag)
    if not materials:
        return await callback.message.answer(f"‚ùå –í —Ä–∞–∑–¥–µ–ª–µ **#{tag}** –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", parse_mode="Markdown")

    await state.update_data(target_tag=tag, materials=materials)
    await state.set_state(AdminStates.waiting_for_index_to_delete)
    
    response_text = f"üóëÔ∏è **–£–î–ê–õ–ï–ù–ò–ï:** –†–∞–∑–¥–µ–ª **#{tag}**\n\n"
    for i, item in enumerate(materials):
        caption = item.get("caption") or ""
        file_name = item.get("file_name", "–¢–µ–∫—Å—Ç/–§–∞–π–ª")
        item_type = item.get("type", "—Ñ–∞–π–ª")
        
        display_name = file_name if item_type != "text" and file_name else caption.strip()
        display_caption = display_name[:60] + "..." if len(display_name) > 60 else display_name

        response_text += f"**{i}:** [`{item_type.upper()}`] {display_caption}\n"
    
    response_text += "\n\nüî¢ **–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è:** –í–≤–µ–¥–∏—Ç–µ **–Ω–æ–º–µ—Ä(–∞) (–∏–Ω–¥–µ–∫—Å)** –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, `0 5 8`), **ALL** –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –∏–ª–∏ `/start` –¥–ª—è –æ—Ç–º–µ–Ω—ã."

    await callback.message.answer(response_text, parse_mode="Markdown")
    await callback.answer()

@dp.message(AdminStates.waiting_for_index_to_delete)
async def process_indexed_deletion(message: types.Message, state: FSMContext):
    """FSM-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã, —É–¥–∞–ª—è–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ FSM."""
    
    if message.text and message.text.lower() == '/start':
        await state.clear()
        return await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_reply_main_menu_keyboard())

    data = await state.get_data()
    tag = data.get('target_tag')
    materials = data.get('materials')

    input_text = message.text.strip().upper()
    
    # 1. –õ–û–ì–ò–ö–ê "–£–î–ê–õ–ò–¢–¨ –í–°–ï" (ALL)
    if input_text == "ALL":
        if tag in content_data:
            content_data[tag] = []
            save_content(content_data)
            await message.answer(f"‚úÖ **–í–°–ï** –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ **#{tag}** –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ **–£–î–ê–õ–ï–ù–´**.", parse_mode="Markdown")
        
        await state.clear()
        return await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_reply_main_menu_keyboard())

    # 2. –õ–û–ì–ò–ö–ê –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø
    try:
        indices_str = input_text.replace(',', ' ').split()
        indices_to_delete = sorted([int(i) for i in indices_str], reverse=True) 
        
        if not indices_to_delete:
            return await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∏—Å–µ–ª (–∏–Ω–¥–µ–∫—Å—ã) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, `0 5 8`) –∏–ª–∏ —Å–ª–æ–≤–æ ALL.")

    except ValueError:
        return await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, `0 5 8`) –∏–ª–∏ —Å–ª–æ–≤–æ ALL.")
        
    # 3. –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ
    deleted_count = 0
    max_index = len(materials) - 1
    
    for index in indices_to_delete:
        if 0 <= index <= max_index:
            materials.pop(index)
            deleted_count += 1
        else:
            await message.answer(f"‚ùå –ò–Ω–¥–µ–∫—Å {index} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–º–∞–∫—Å–∏–º—É–º {max_index}). –ü—Ä–æ–ø—É—Å–∫.", parse_mode="Markdown")

    if deleted_count > 0:
        content_data[tag] = materials
        save_content(content_data)
        
        await message.answer(
            f"‚úÖ **{deleted_count}** –º–∞—Ç–µ—Ä–∏–∞–ª(–∞) –±—ã–ª(–∏) —É—Å–ø–µ—à–Ω–æ **–£–î–ê–õ–ï–ù(–´)** –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ **#{tag}**.", 
            parse_mode="Markdown"
        )
    else:
        await message.answer("‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã.", parse_mode="Markdown")

    # 4. –ü–õ–ê–í–ù–´–ô –í–´–•–û–î
    await state.clear()
    await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_reply_main_menu_keyboard())


# -------------------- 8. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ú–ï–ù–Æ (–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –§–õ–û–£) --------------------
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    
    if not await check_subscription(user_id):
        await message.answer(get_no_access_message(), reply_markup=get_subscription_keyboard(), parse_mode="Markdown")
    else:
        await message.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=get_reply_main_menu_keyboard())

@dp.callback_query(F.data == "check_subscription")
async def process_check_subscription(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    if await check_subscription(user_id):
        await callback.message.delete()
        await callback.message.answer(
            "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", 
            reply_markup=get_reply_main_menu_keyboard()
        )
    else:
        await callback.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.", show_alert=True)
    
    await callback.answer() 


@dp.message(lambda m: m.text == "üìÇ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def materials_menu(message: types.Message):
    if not await check_subscription(message.from_user.id):
        return await message.answer(get_no_access_message(), reply_markup=get_subscription_keyboard(), parse_mode="Markdown")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:", reply_markup=get_reply_materials_menu_keyboard())

@dp.message(lambda m: m.text == "üìñ –õ–µ–∫—Ü–∏–∏")
async def lectures_handler(message: types.Message):
    if not await check_subscription(message.from_user.id):
        return await message.answer(get_no_access_message(), reply_markup=get_subscription_keyboard(), parse_mode="Markdown")
    await send_content_by_tag(message.chat.id, "lec")

@dp.message(lambda m: m.text == "üî¨ –ü—Ä–∞–∫—Ç–∏–∫–∞")
async def practice_handler(message: types.Message):
    if not await check_subscription(message.from_user.id):
        return await message.answer(get_no_access_message(), reply_markup=get_subscription_keyboard(), parse_mode="Markdown")
    await send_content_by_tag(message.chat.id, "prac")

@dp.message(lambda m: m.text == "üé• –í–∏–¥–µ–æ")
async def video_handler(message: types.Message):
    if not await check_subscription(message.from_user.id):
        return await message.answer(get_no_access_message(), reply_markup=get_subscription_keyboard(), parse_mode="Markdown")
    await send_content_by_tag(message.chat.id, "vid")

@dp.message(lambda m: m.text == "üìö –≠–∫–∑–∞–º–µ–Ω")
async def exam_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=get_reply_exam_menu_keyboard())

@dp.message(lambda m: m.text.endswith("-–∫—É—Ä—Å") and not m.text.startswith("–ò—Ç–æ–≥ -"))
async def exam_handler(message: types.Message):
    if not await check_subscription(message.from_user.id):
        return await message.answer(get_no_access_message(), reply_markup=get_subscription_keyboard(), parse_mode="Markdown")

    course = message.text.split("-")[0]
    tag = f"exam{course}"
    
    await send_content_by_tag(message.chat.id, tag)

    if message.from_user.id in ADMIN_IDS:
        await message.answer(
            f"**–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨:**",
            reply_markup=get_admin_menu(tag),
            parse_mode="Markdown"
        )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=get_reply_exam_menu_keyboard())


@dp.message(lambda m: m.text == "üìã –ò—Ç–æ–≥")
async def summary_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=get_reply_summary_course_keyboard())

@dp.message(lambda m: m.text.startswith("–ò—Ç–æ–≥ -") and m.text.endswith("–∫—É—Ä—Å"))
async def summary_course(message: types.Message):
    if not await check_subscription(message.from_user.id):
        return await message.answer(get_no_access_message(), reply_markup=get_subscription_keyboard(), parse_mode="Markdown")
        
    course_num = int(message.text.split('-')[1].split()[0])
    await message.answer(
        f"**–ò—Ç–æ–≥: {course_num} –∫—É—Ä—Å**\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏—Ç–æ–≥:",
        parse_mode="Markdown",
        reply_markup=get_reply_final_summary_keyboard(course_num)
    )

@dp.message(lambda m: m.text.startswith("–ò—Ç–æ–≥ ") and "." in m.text)
async def summary_result(message: types.Message):
    if not await check_subscription(message.from_user.id):
        return await message.answer(get_no_access_message(), reply_markup=get_subscription_keyboard(), parse_mode="Markdown")
        
    tag = "itog" + message.text.split(" ")[1].replace(".", "-") 
    
    await send_content_by_tag(message.chat.id, tag)

    if message.from_user.id in ADMIN_IDS:
        await message.answer(
            f"**–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨:**",
            reply_markup=get_admin_menu(tag),
            parse_mode="Markdown"
        )
    
    course_num = int(message.text.split(' ')[1].split('.')[0])
    await message.answer(
        "–ú–∞—Ç–µ—Ä–∏–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π:",
        reply_markup=get_reply_final_summary_keyboard(course_num) 
    )


# --- –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç ---
@dp.message(lambda m: m.text == "üö™ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def personal_account(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.button(text="–û—Ç–∫—Ä—ã—Ç—å study.tj", web_app=WebAppInfo(url="https://study.tj/"))
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=builder.as_markup())

# --- –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ---
@dp.message(lambda m: m.text == "‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
async def feedback_handler(message: types.Message):
    FEEDBACK_CONTACT_URL = "https://t.me/parviz_medik"
    builder = InlineKeyboardBuilder()
    builder.button(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", url=FEEDBACK_CONTACT_URL)
    
    await message.answer(
        "**–û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨**\n\n"
        "–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –≤–∞—à–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º, –∂–∞–ª–æ–±–∞–º –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )

# --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥ ---
@dp.message(lambda m: m.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_main(message: types.Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_reply_main_menu_keyboard())

@dp.message(lambda m: m.text == "üîô –ö –∫—É—Ä—Å–∞–º –ò—Ç–æ–≥–∞")
async def back_summary(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=get_reply_summary_course_keyboard())


# --- –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
@dp.message()
async def unknown_message(message: types.Message):
    if message.text:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")


# -------------------- 9. –ó–ê–ü–£–°–ö --------------------
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏ –∑–∞–≥—Ä—É–∑–æ–∫ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())