import os
import json
import asyncio
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è FSM
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import WebAppInfo, ContentType 
from aiogram import F 


# -------------------- 1. –ù–ê–°–¢–†–û–ô–ö–ê –ò –ö–û–ù–°–¢–ê–ù–¢–´ --------------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

CONTENT_FILE = "content.json"
# üö® –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –í–ê–® Telegram ID 
ADMIN_IDS = [6720999592, 6520890849]
# ADMIN_IDS = [int(id.strip()) for id in ADMIN_IDS_STR.split(',') if id.strip().isdigit()] if ADMIN_IDS_STR else []


# --- 2. FSM –°–û–°–¢–û–Ø–ù–ò–Ø ---
class AdminStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    waiting_for_content = State()


# --- 3. –ó–ê–ì–†–£–ó–ö–ê / –°–û–•–†–ê–ù–ï–ù–ò–ï –ö–û–ù–¢–ï–ù–¢–ê ---
def load_content():
    if not os.path.exists(CONTENT_FILE):
        return {}
    with open(CONTENT_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_content(data):
    with open(CONTENT_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

content_data = load_content()


# --- 4. –§–£–ù–ö–¶–ò–ò –ö–õ–ê–í–ò–ê–¢–£–† (–û–°–¢–ê–í–õ–ï–ù–´ –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ---
def get_reply_main_menu_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üìö –≠–∫–∑–∞–º–µ–Ω")
    builder.button(text="üìã –ò—Ç–æ–≥")
    builder.button(text="üìÇ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
    builder.button(text="üö™ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
    builder.adjust(2, 2)
    return builder.as_markup(resize_keyboard=True)

def get_reply_exam_menu_keyboard():
    builder = ReplyKeyboardBuilder()
    for i in range(1, 7):
        builder.button(text=f"{i}-–∫—É—Ä—Å")
    builder.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    builder.adjust(3, 3, 1)
    return builder.as_markup(resize_keyboard=True)

def get_reply_materials_menu_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üìñ –õ–µ–∫—Ü–∏–∏")
    builder.button(text="üî¨ –ü—Ä–∞–∫—Ç–∏–∫–∞")
    builder.button(text="üé• –í–∏–¥–µ–æ")
    builder.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    builder.adjust(3, 1)
    return builder.as_markup(resize_keyboard=True)

def get_reply_summary_course_keyboard():
    builder = ReplyKeyboardBuilder()
    for i in range(1, 4): 
        builder.button(text=f"–ò—Ç–æ–≥ - {i} –∫—É—Ä—Å") 
    builder.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é") 
    builder.adjust(3, 1) 
    return builder.as_markup(resize_keyboard=True)

def get_reply_final_summary_keyboard(course_num: int):
    builder = ReplyKeyboardBuilder()
    for i in range(1, 5):
        builder.button(text=f"–ò—Ç–æ–≥ {course_num}.{i}")
    builder.button(text="üîô –ö –∫—É—Ä—Å–∞–º –ò—Ç–æ–≥–∞")
    builder.adjust(4, 1)
    return builder.as_markup(resize_keyboard=True)


# -------------------- 5. –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –ö–û–ù–¢–ï–ù–¢–ê (–ò–°–ü–†–ê–í–õ–ï–ù–û) --------------------

def clean_tags(text: str, tag: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–≥ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    # –£–¥–∞–ª—è–µ–º —Ç–µ–≥ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –∏ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ
    cleaned_text = text.replace(f"#{tag}", "").replace(f"#{tag.upper()}", "")
    
    # –£–¥–∞–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–µ–≥–∏ (#exam1) –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    cleaned_text = ' '.join(cleaned_text.split())
    
    return cleaned_text

async def send_content_by_tag(chat_id: int, tag: str):
    """–ù–∞—Ö–æ–¥–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –≤ JSON-—Å–ª–æ–≤–∞—Ä–µ –ø–æ —Ç–µ–≥—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ë–ï–ó –¢–ï–ì–û–í."""
    tag = tag.lower()
    materials = content_data.get(tag, [])
    
    if not materials:
        await bot.send_message(chat_id, f"‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã(")
        return

    await bot.send_message(chat_id, f"üì¶ **–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É:**", parse_mode="Markdown")

    for item in materials:
        caption = item.get("caption", None)
        file_id = item.get("file_id", None)
        item_type = item.get("type")
        
        # ‚ö†Ô∏è –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–ß–ò–°–¢–ö–ê –¢–ï–ö–°–¢–ê –û–¢ –¢–ï–ì–û–í
        if caption:
            caption = clean_tags(caption, tag)
            
        # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç (–Ω–µ –º–µ–¥–∏–∞), —É–¥–∞–ª—è–µ–º —Ç–µ–≥ –∏–∑ —Å–∞–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        if item_type == "text" and caption:
            caption = clean_tags(caption, tag)
            
        try:
            if item_type == "text":
                await bot.send_message(chat_id, caption)
            elif item_type == "photo" and file_id:
                await bot.send_photo(chat_id, file_id, caption=caption)
            elif item_type == "video" and file_id:
                await bot.send_video(chat_id, file_id, caption=caption)
            elif item_type == "document" and file_id:
                await bot.send_document(chat_id, file_id, caption=caption)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ {item_type} –¥–ª—è —Ç–µ–≥–∞ #{tag}: {e}")
            await bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.")

    await bot.send_message(chat_id, "‚úÖ –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")


# -------------------- 6. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò FSM (–ó–ê–ì–†–£–ó–ö–ê) --------------------

@dp.callback_query(lambda c: c.data.startswith('upload__'), lambda m: m.from_user.id in ADMIN_IDS)
async def start_upload_fsm(callback: types.CallbackQuery, state: FSMContext):
    target_tag = callback.data.split('__')[1]
    
    await state.update_data(target_tag=target_tag)
    await state.set_state(AdminStates.waiting_for_content)
    
    await callback.message.answer(
        f"‚úÖ –†–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ **#{target_tag}**.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /start.", 
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.message(AdminStates.waiting_for_content)
async def process_content_upload(message: types.Message, state: FSMContext):
    
    if message.text and message.text.lower() == '/start':
        await state.clear()
        return await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_reply_main_menu_keyboard())

    data = await state.get_data()
    target_tag = data.get('target_tag')
    
    if not target_tag:
        await state.clear()
        return await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π —Ä–∞–∑–¥–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        
    entry = {"type": "text", "file_id": None, "caption": message.caption or message.text}
    
    if message.document:
        entry["type"] = "document"
        entry["file_id"] = message.document.file_id
    elif message.photo:
        entry["type"] = "photo"
        entry["file_id"] = message.photo[-1].file_id
    elif message.video:
        entry["type"] = "video"
        entry["file_id"] = message.video.file_id
    elif not message.text:
        await message.answer("‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–Ω—É–∂–µ–Ω —Ñ–∞–π–ª, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç).")
        return

    if target_tag not in content_data:
        content_data[target_tag] = []
    
    entry['caption'] = entry['caption'].strip() # –û—á–∏—Å—Ç–∫–∞ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    content_data[target_tag].append(entry)
    save_content(content_data)

    await message.answer(f"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ä–∞–∑–¥–µ–ª **#{target_tag}**!", parse_mode="Markdown")
    await state.clear()
    
    await cmd_start(message)


# -------------------- 7. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ú–ï–ù–Æ (–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –§–õ–û–£) --------------------

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=get_reply_main_menu_keyboard())

# --- –ú–∞—Ç–µ—Ä–∏–∞–ª—ã ---
@dp.message(lambda m: m.text == "üìÇ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def materials_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:", reply_markup=get_reply_materials_menu_keyboard())

@dp.message(lambda m: m.text == "üìñ –õ–µ–∫—Ü–∏–∏")
async def lectures_handler(message: types.Message):
    await send_content_by_tag(message.chat.id, "lec")

@dp.message(lambda m: m.text == "üî¨ –ü—Ä–∞–∫—Ç–∏–∫–∞")
async def practice_handler(message: types.Message):
    await send_content_by_tag(message.chat.id, "prac")

@dp.message(lambda m: m.text == "üé• –í–∏–¥–µ–æ")
async def video_handler(message: types.Message):
    await send_content_by_tag(message.chat.id, "vid")

# --- –≠–∫–∑–∞–º–µ–Ω (–û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è FSM) ---
@dp.message(lambda m: m.text == "üìö –≠–∫–∑–∞–º–µ–Ω")
async def exam_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=get_reply_exam_menu_keyboard())

# main.py (–°–µ–∫—Ü–∏—è 7)

@dp.message(lambda m: m.text.endswith("-–∫—É—Ä—Å") and not m.text.startswith("–ò—Ç–æ–≥ -"))
async def exam_handler(message: types.Message):
    course = message.text.split("-")[0]
    tag = f"exam{course}"
    
    # 1. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–ª–æ—É)
    await send_content_by_tag(message.chat.id, tag)

    # 2. –ë–ï–ó–£–°–õ–û–í–ù–û –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω
    if message.from_user.id in ADMIN_IDS:
        upload_builder = InlineKeyboardBuilder()
        upload_builder.button(text=f"‚ûï –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ #{tag}", callback_data=f"upload__{tag}") 
        
        await message.answer(
            f"**–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨:** –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ —Ä–∞–∑–¥–µ–ª –≤ —Ç–µ–∫—É—â–∏–π —Ä–∞–∑.",
            reply_markup=upload_builder.as_markup(),
            parse_mode="Markdown"
        )
    # 3. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=get_reply_exam_menu_keyboard())

# --- –ò—Ç–æ–≥ (–û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è FSM) ---
@dp.message(lambda m: m.text == "üìã –ò—Ç–æ–≥")
async def summary_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=get_reply_summary_course_keyboard())

@dp.message(lambda m: m.text.startswith("–ò—Ç–æ–≥ -") and m.text.endswith("–∫—É—Ä—Å"))
async def summary_course(message: types.Message):
    course_num = int(message.text.split('-')[1].split()[0])
    await message.answer(
        f"**–ò—Ç–æ–≥: {course_num} –∫—É—Ä—Å**\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏—Ç–æ–≥:",
        parse_mode="Markdown",
        reply_markup=get_reply_final_summary_keyboard(course_num)
    )

# main.py (–°–µ–∫—Ü–∏—è 7)

@dp.message(lambda m: m.text.startswith("–ò—Ç–æ–≥ ") and "." in m.text)
async def summary_result(message: types.Message):
    tag = "itog" + message.text.split(" ")[1].replace(".", "-") 
    
    # 1. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–ª–æ—É)
    await send_content_by_tag(message.chat.id, tag)

    # 2. –ë–ï–ó–£–°–õ–û–í–ù–û –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω
    if message.from_user.id in ADMIN_IDS:
        upload_builder = InlineKeyboardBuilder()
        upload_builder.button(text=f"‚ûï –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ #{tag}", callback_data=f"upload__{tag}") 
        
        await message.answer(
            f"**–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨:** –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª.",
            reply_markup=upload_builder.as_markup(),
            parse_mode="Markdown"
        )
    
    # 3. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    course_num = int(message.text.split(' ')[1].split('.')[0])
    await message.answer(
        "–ú–∞—Ç–µ—Ä–∏–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π:",
        reply_markup=get_reply_final_summary_keyboard(course_num) 
    )

# --- –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç ---
@dp.message(lambda m: m.text == "üö™ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def personal_account(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.button(text="–û—Ç–∫—Ä—ã—Ç—å study.tj", web_app=WebAppInfo(url="https://study.tj/"))
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=builder.as_markup())

# --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥ ---
@dp.message(lambda m: m.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_main(message: types.Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_reply_main_menu_keyboard())

@dp.message(lambda m: m.text == "üîô –ö –∫—É—Ä—Å–∞–º –ò—Ç–æ–≥–∞")
async def back_summary(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=get_reply_summary_course_keyboard())


# --- –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
@dp.message()
async def unknown_message(message: types.Message):
    if message.text:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")


# -------------------- 8. –ó–ê–ü–£–°–ö --------------------
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏ –∑–∞–≥—Ä—É–∑–æ–∫ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
